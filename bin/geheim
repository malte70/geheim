#!/bin/bash
# 
# bin/geheim
# 
# This scripts contains all the logic of geheim.
# 

APP_NAME="geheim"
APP_VERSION="0.2.1"

DATA="${GEHEIM_DATA-$HOME/.geheim.db}"
DEFAULT_KEY="$(grep ^default-key $HOME/.gnupg/gpg.conf 2>/dev/null | awk '{ print $2 }')"
if [[ -z $DEFAULT_KEY && $(gpg -K | wc -l) -gt 1 ]]
then
	DEFAULT_KEY=$(gpg -K | grep ^sec | cut -d/ -f2 | cut -c -8)
fi

DEFAULT_KEY=" -r $DEFAULT_KEY"

action_init() {
	if [[ -f "$DATA" ]]; then
		echo "$DATA already exists. Not forcing overwrite." >&2
		exit 1
	fi
	rm -rf "$DATA.dir"
	mkdir "$DATA.dir"
	echo "version: 0.2" > $DATA.dir/.geheim.db
	mkdir -p "${DATA}.dir/test"
	echo "Hello, World" > "${DATA}.dir/test/hello"
	cd "${DATA}.dir"
	tar -c -f - * | gpg --encrypt --quiet $DEFAULT_KEY >"$DATA"
	rm -rf "${DATA}.dir"
}

action_list() {
	if [[ $1 == "-a" ]]
	then
		gpg --decrypt --quiet "$DATA" | tar tO 2>&1 | sed 's@^@/@g'
	else
		gpg --decrypt --quiet "$DATA" | tar tO 2>&1 | sed 's@^@/@g' | grep -v '/$'
	fi
}

action_get_node() {
	NODE="${1:1:${#1}}"
	[[ ${1:0:1} != "/" ]] && NODE="$1"
	if gpg --decrypt --quiet "$DATA" | tar xO "$NODE" 2>/dev/null
	then
		true
	else
		echo "$0: Node /$NODE not found." >&2
		exit 2
	fi
}
action_remove_node() {
	NODE="${1:1:${#1}}"
	[[ ${1:0:1} != "/" ]] && NODE="$1"
	gpg --decrypt --quiet <"$DATA" > "$DATA.tar"
	rm "$DATA"
	tar -f "$DATA.tar" --delete --recursive-unlink "$NODE"
	gpg --encrypt --quiet $DEFAULT_KEY <"$DATA.tar" >"$DATA"
}
action_add_node() {
	rm -rf "$DATA.dir"
	mkdir "$DATA.dir"
	gpg --decrypt --quiet <"$DATA" | tar -x -f - -C "$DATA.dir"
	mkdir -p "${DATA}.dir$(dirname $1)"
	touch "${DATA}.dir$1"
	echo "Now type the content for $1."
	while read line
	do
		echo $line >> "${DATA}.dir$1"
	done
	cd "${DATA}.dir"
	rm "$DATA"
	tar -c -f - * | gpg --encrypt --quiet $DEFAULT_KEY >"$DATA"
	rm -rf "${DATA}.dir"
}
action_edit_node() {
	rm -rf "$DATA.dir"
	mkdir "$DATA.dir"
	gpg --decrypt --quiet <"$DATA" | tar -x -f - -C "$DATA.dir"
	f=${DATA}.dir$1
	if [[ -n $EDITOR ]]; then
		$EDITOR "$f"
	elif which vim &>/dev/null; then
		vim "$f"
	elif which nano &>/dev/null; then
		nano "$f"
	else
		echo "Error: No editor found! Set your editor in \$EDITOR and try again." >&2
		exit 1
	fi
	cd "${DATA}.dir"
	rm "$DATA"
	tar -c -f - * | gpg --encrypt --quiet $DEFAULT_KEY >"$DATA"
	rm -rf "${DATA}.dir"
}

version() {
	echo "${APP_NAME} ${APP_VERSION}"
}

usage() {
	echo -e "Usage: ${APP_NAME} <action> [<parameters>]"
	echo -e "Available actions:"
	echo -e "\tinit         Initialize the data storage"
	echo -e "\tlist [-a]    List available Nodes"
	echo -e "\tget <node>   Get a node's contents"
	echo -e "\trm <node>    Remove a node"
	echo -e "\tadd <node>   Add a node."
	echo -e "\tedit <node>  Edit a node."
}

check_env() {
	if [[ $(gpg -K | wc -l) -lt 1 ]]
	then
		echo -e "geheim: No private GPG keys found! Please generate one with \`gpg --gen-key\`" >&2
		exit 1
	fi
	
	if [[ ! -f $DATA ]]; then
		echo -e "geheim: No database found. Generating it with \`$0 init\`" >&2
		exit 1
	fi
}
main() {
	if [ $# -eq 0 ]; then
		usage
		exit 0
	fi
	
	# Check for arguments which don't need a working database
	case "$1" in
		"--version"|"-V")
			version
			exit 0
			;;
		"--help"|"-h")
			usage
			exit 0
			;;
		"init")
			action_init
			;;
	esac
	
	# Check environment
	check_env
	
	# Check for arguments which DO need a working database
	case "$1" in
		"list")
			action_list $2
			;;
		"get")
			action_get_node $2
			;;
		"rm")
			action_remove_node $2
			;;
		"add")
			action_add_node $2
			;;
		"edit")
			action_edit_node $2
			;;
		*)
			usage >&2
			exit 1
			;;
	esac
}

main $@
